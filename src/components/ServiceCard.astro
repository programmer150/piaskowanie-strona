---
export interface Props {
  title: string;
  description: string;
  icon: string;
  href?: string;
}

const { title, description, icon, href } = Astro.props;
const Tag = href ? 'a' : 'div';
---

<Tag href={href} class={`service-card p-8 rounded-xl border border-gray-700 hover:border-primary-500 hover:shadow-glow transition-all group relative overflow-hidden ${href ? 'block' : ''}`}>
  <div class="text-primary-400 mb-4 group-hover:scale-110 transition-transform relative z-10"  set:html={icon} />
  <h3 class="text-xl font-semibold text-gray-100 mb-3 group-hover:text-primary-400 transition-colors relative z-10">{title}</h3>
  <p class="text-gray-300 leading-relaxed relative z-10">{description}</p>
  {href && (
    <div class="mt-4 text-primary-400 font-medium flex items-center group-hover:translate-x-1 transition-transform relative z-10">
      Dowiedz się więcej
      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </div>
  )}
</Tag>

<style>
.service-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background-image: url('/card2.png');
  background-size: cover;
  background-position: center;
  filter: blur(4px);
  border-radius: 0.75rem;
  z-index: 2;
  opacity: 0.8;
  transition: filter 0.6s ease, opacity 0.6s ease;
}

.service-card::after {
  content: '';
  position: absolute;
  inset: 0;
  background-color: rgb(31, 41, 55, 0.7);
  border-radius: 0.75rem;
  z-index: 1;
}

.service-card:hover::before {
  filter: blur(0);
  opacity: 1;
}

/* Efekt scroll tylko na urządzeniach dotykowych (bez hover) */
@media (hover: none) {
  .service-card.in-view::before {
    filter: blur(0);
    opacity: 1;
  }
}
</style>

<script>
if (typeof window !== 'undefined') {
  let visibleElements = new Map<Element, number>();

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        visibleElements.set(entry.target, entry.intersectionRatio);
      } else {
        visibleElements.delete(entry.target);
      }
    });

    // Znajdź najbardziej widoczny element
    let mostVisible: Element | null = null;
    let maxRatio = 0;

    visibleElements.forEach((ratio, element) => {
      if (ratio > maxRatio) {
        maxRatio = ratio;
        mostVisible = element;
      }
    });

    // Usuń klasę ze wszystkich i dodaj tylko do najbardziej widocznego
    document.querySelectorAll('.service-card').forEach(el => {
      (el as HTMLElement).classList.remove('in-view');
    });

    if (mostVisible) {
      (mostVisible as HTMLElement).classList.add('in-view');
    }
  }, {
    threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
  });

  document.querySelectorAll('.service-card').forEach(el => {
    observer.observe(el);
  });
}
</script>
